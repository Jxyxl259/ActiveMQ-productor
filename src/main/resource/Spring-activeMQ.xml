<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 真正可以产生Connection的ConnectionFactory,由对应的JMS服务厂商提供 -->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <!-- ActiveMQ服务地址 -->
        <property name="brokerURL" value="${mq.brokerURL}"/>
        <property name="userName" value="${mq.userName}"/>
        <property name="password" value="${mq.password}"/>
    </bean>


    <!--
    ActiveMQ为我们提供了一个PooledConnectionFactory,通过往里面注入一个ActiveMQConnectionFactory
    可以用来将Connection、Session和MessageProducer池化，这样可以大大减少资源消耗
    依赖于activemq-pool包
    -->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <property name="maxConnections" value="${mq.pool.maxConnections}"/>
    </bean>



    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的，可以生产JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
    </bean>



    <!-- Spring 提供的JMS工具类JmsTemplate(Jms模板类)，它可以进行消息的发送接收 -->
    <!-- 队列模板 -->
    <bean id="activeMqJMSTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的哪个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="connectionFactory"/>
        <!-- 要将消息发送到哪个队列中 -->
        <property name="defaultDestinationName" value="${queueName}"/>
    </bean>

    <!-- 以上是异步发送邮件的配置 -->




    <!-- 测试MQ的三种消息监听器之MessageListener 的消息producer的配置 -->
    <bean id="amqJMSTemplate_01" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="defaultDestinationName" value="${messageListenerQueueName}"/>
    </bean>





    <!-- 测试MQ的三种消息监听器之SessionAwareMessageListener 的消息producer的配置 -->
    <bean id="amqJMSTemplate_02" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="defaultDestinationName" value="${sessionAwareMessageListenerQueueName}"/>
    </bean>
    <!-- SessionAwareMessageListener是Spring提供的一种MessageListener,
    其功能特点就是可以在收到消息之后再去通知消息的生产者，
    所以在produce这边，我们还要配置一个消息监听器和监听容器，
    用以接收消费端收到消息后的通知-->
    <!-- 回调消息队列（消息回调目的地） -->
    <bean id="callBackQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>${callBackQueueName}</value>
        </constructor-arg>
    </bean>

    <!-- 配置消息监听器 -->
    <bean id="callBackMessageListener" class="com.amq.producer.impl.SessionAwareMessageListenerTest.CallBackMessageListener"/>

    <!-- 配置消息监听容器 -->
    <bean id="callBackListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="messageListener" ref="callBackMessageListener"/>
        <property name="destination" ref="callBackQueueDestination"/>
    </bean>




    <!-- 测试MQ的三种消息监听器之MessageListenerAdapter 的消息producer的配置 -->
    <bean id="messageListenerAdapterTestDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>${MessageListenerAdapterQueueName}</value>
        </constructor-arg>
    </bean>
    <bean id="amqJMSTemplate_03" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="defaultDestinationName" value="${MessageListenerAdapterQueueName}"/>
    </bean>
    <!-- MessageListenerAdapter消息回调队列 -->
    <bean id="adapterCallBackDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>${adapterCallBackQueueName}</value>
        </constructor-arg>
    </bean>
    <bean id="mladapterCallbackListener" class="com.amq.producer.impl.MessageListenerAdapterTest.AdapterCallBackMessageListener"/>

    <bean id="mladapterCallBackContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="destination" ref="adapterCallBackDestination"/>
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="messageListener" ref="mladapterCallbackListener"/>
    </bean>
</beans>